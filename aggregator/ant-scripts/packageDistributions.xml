<project default="packageDistributions">
	<!-- generic properties -->
	<!-- 
		jre.packages.location => location where the tar.gz files of the JRE are 
		temp.mac.dir => temporary location used to create the DMG artifact
	-->
	<property name="jssRcpPluginName" value="com.jaspersoft.studio.rcp" />
	<property name="jssRcpProductFolderName" value="com.jaspersoft.studio.rcp.product" />
	<property name="jssRcpProductFolderPath" value="${basedir}/../../${jssRcpProductFolderName}" />
	<property name="dist" value="${basedir}/../product/dist"/>
	<property name="productRootFolder" value="jaspersoftstudio" />
	<property name="productVersionFile" value="buildversion.properties" />
	<property name="jre.location.linux64" value="features/jre.linux.gtk.x86_64.feature_17.0.8.1_1/eclipsetemurin_jre/bin" />
	<!-- import properties for mac machine producing the DMG -->
	<property file="authenticationInfo.properties"/>

	<!-- ================================= 
          target: packageDistributions
         ================================= -->
	<target name="packageDistributions" description="Invoke the packaging tasks for all distributions">
		<echo message="Packaging all the distributions"/>
		<antcall>
			<target name="prepareEnvironment"/>
    		<target name="linux-x86_64-installer"/>
			<target name="mac-x86_64-installer"/>
    		<target name="windows-x86_64-installer"/>
		</antcall>
	</target>

	<target name="prepareEnvironment" description="Prepare the environment for the packages" depends="readProductVersion">
		<property file="jss.properties"/>
		<delete dir="${dist}" includeemptydirs="true" defaultexcludes="false"/>
		<mkdir dir="${dist}"/>
	</target>
	
	<!-- ================================= 
          target: windows-x86_64-installer
         ================================= -->
	<target name="windows-x86_64-installer" description="Create the win32 x64 installer using NSIS script (NSIS required)" if="jss.version">
		<echo message="Executing 'windows-x86_64-installer' task"/>
		<property name="dirlocation.win32.x86_64" value="${jssRcpProductFolderPath}/target/products/${jssRcpProductFolderName}/win32/win32/x86_64" />

		<!-- copy additional licensing files -->
		<copy file="${basedir}/rootfiles/license/license.txt" tofile="${dirlocation.win32.x86_64}/${productRootFolder}/${jss.distro.prefix}_${jss.version}_license.txt" />
		<!-- create zip file -->
		<zip destfile="${dist}/${jss.win32.x86_64.zipfile}">
			<fileset dir="${dirlocation.win32.x86_64}" excludes="**/_MACOSX, **/.DS_Store"/>
		</zip>

		<taskdef name="nsisant" classname="net.sf.nsisant.Task" classpath="${jssRcpProductFolderPath}/lib/nsisant-1.1.jar" />
		<nsisant script="${jssRcpProductFolderPath}/resources/JaspersoftStudioInstaller64.nsi">
			<define name="PRDUCT_ARCH" value="x86_64" />
			<define name="PRODUCT_VERSION" value="${jss.version}" />
			<define name="PRODUCT_WEB_SITE" value="https://community.jaspersoft.com/project/jaspersoft-studio" />
			<define name="INSTALLER_FILES_DIR" value="${dirlocation.win32.x86_64}/jaspersoftstudio" />
			<define name="OUTPUT_FILE_NAME" value="${dist}/${jss.win32.x86_64.installer}" />
		</nsisant>
	</target>

	<!-- ================================= 
          target: linux-x86_64-installer
         ================================= -->
	<target name="linux-x86_64-installer" description="Create the Linux (x86_64) tgz package (Unix system required)" if="jss.version">
		<echo message="Executing 'linux-x86_64-installer' task"/>
		<property name="dirlocation.linux.x86_64" value="${jssRcpProductFolderPath}/target/products/${jssRcpProductFolderName}/linux/gtk/x86_64" />

		<!-- copy additional licensing files -->
		<copy file="${basedir}/rootfiles/license/license.txt" tofile="${dirlocation.linux.x86_64}/${productRootFolder}/${jss.distro.prefix}_${jss.version}_license.txt" />
		<!-- copy fix files for Ubuntu -->
		<copy file="${basedir}/rootfiles/linux/linux.readme" todir="${dirlocation.linux.x86_64}/${productRootFolder}" />
		<copy file="${basedir}/rootfiles/linux/runjss.sh" todir="${dirlocation.linux.x86_64}/${productRootFolder}" />
		<!-- set executable flag to launcher -->
		<chmod file="${dirlocation.linux.x86_64}/${productRootFolder}/Jaspersoft Studio" perm="ugo+x" />	
		<!-- rename the folder -->
		<move file="${dirlocation.linux.x86_64}/${productRootFolder}" tofile="${dirlocation.linux.x86_64}/${jss.distro.folder}" />
		<!-- create tar.gz file -->
		<!-- <tar destfile="${dist}/${jss.linux.x86_64.tgz}" basedir="${dirlocation.linux.x86_64}/" compression="gzip" longfile="gnu" /> -->
		<tar destfile="${dist}/${jss.linux.x86_64.tgz}" longfile="gnu" compression="gzip">
			<tarfileset dir="${dirlocation.linux.x86_64}/" filemode="755">
				<include name="**/features/jre.linux.gtk.x86_64.feature_*/eclipsetemurin_jre/bin/*" />
				<include name="**/Jaspersoft Studio" />
				<include name="**/runjss.sh"/>
			</tarfileset>
			<tarfileset dir="${dirlocation.linux.x86_64}/">
				<include name="**/*" />
				<exclude name="**/features/jre.linux.gtk.x86_64.feature_*/eclipsetemurin_jre/bin/*"/>
				<exclude name="**/Jaspersoft Studio" />
				<exclude name="**/runjss.sh"/>
			</tarfileset>
		</tar>
		<!-- create debian package -->
		<antcall target="createDeb">
			<param name="architecture" value="amd64"/>
			<param name="debpackage" value="jaspersoftstudio"/>
			<param name= "zipdir.linux" value = "${dirlocation.linux.x86_64}/"/>
			<param name="jre.feature.location" value="${jre.location.linux64}"/>
		</antcall>
	</target>

	<!-- ================================= 
          target: mac-x86_64-installer
         ================================= -->
	<target name="mac-x86_64-installer" description="Create DMG installer for Mac x86_64 using a remote mac server" if="jss.version">
		<echo message="Executing 'mac-x86_x64-installer' task"/>
		<property name="dirlocation.mac.x86_64" value="${jssRcpProductFolderPath}/target/products/${jssRcpProductFolderName}/macosx/cocoa/x86_64" />
		<property name="mac.x86_64.zipfile" value="${dist}/JaspersoftStudio-macosx.cocoa.x86_64.zip" />

		<!-- copy additional licensing files -->
		<copy file="${basedir}/rootfiles/license/license.txt" tofile="${dirlocation.mac.x86_64}/${productRootFolder}.app/Contents/Eclipse/${jss.distro.prefix}_${jss.version}_license.txt" />
		<!-- remove "broken" jre dir -->
		<delete dir="${dirlocation.mac.x86_64}/${productRootFolder}.app/Contents/Eclipse/features/jre.macosx.cocoa.x86_64.feature_17.0.8.1_1/eclipsetemurin_jre" />
		<!-- extract correct jre dir  with symbolic links -->
	    <exec executable="tar">
	       <arg line="-xzf ${jre.packages.location}/jre-17.0.8.1_1-macosx-x64.tar.gz -C ${dirlocation.mac.x86_64}/${productRootFolder}.app/Contents/Eclipse/features/jre.macosx.cocoa.x86_64.feature_17.0.8.1_1/" />
	    </exec>
		<exec executable="zip" dir="${dirlocation.mac.x86_64}">
			<arg line="-r -X --symlinks ${mac.x86_64.zipfile} ${productRootFolder}.app"/>
		</exec>

		<sshexec host="${dmg.sshhost}" username="${dmg.sshuser}" password="${dmg.sshpass}" command="rm -Rf ${dmg.sshroot}/tmp-jssbuild" trust="true"/>
		<sshexec host="${dmg.sshhost}" username="${dmg.sshuser}" password="${dmg.sshpass}" command="mkdir ${dmg.sshroot}/tmp-jssbuild" trust="true"/>
		<scp file="${jssRcpProductFolderPath}/resources/jss-package-template.tgz" todir="${dmg.sshuser}@${dmg.sshhost}:${dmg.sshroot}/tmp-jssbuild" password="${dmg.sshpass}" trust="true"/>
		<scp file="${jssRcpProductFolderPath}/resources/mac_distro.sh" todir="${dmg.sshuser}@${dmg.sshhost}:${dmg.sshroot}/tmp-jssbuild" password="${dmg.sshpass}" trust="true"/>
		<scp file="${mac.x86_64.zipfile}" todir="${dmg.sshuser}@${dmg.sshhost}:${dmg.sshroot}/tmp-jssbuild" password="${dmg.sshpass}" trust="true"/>
		<sshexec host="${dmg.sshhost}" username="${dmg.sshuser}" password="${dmg.sshpass}" command="cd '${dmg.sshroot}/tmp-jssbuild'; chmod +x mac_distro.sh; ./mac_distro.sh ${jss.version}" trust="true"/>
		<scp file="${dmg.sshuser}@${dmg.sshhost}:${dmg.sshroot}/tmp-jssbuild/jaspersoftstudio.dmg" localTofile="${dist}/${jss.mac.x86_64}" password="${dmg.sshpass}" trust="true"/>
		
		<!-- remove the temporary zipped file -->
		<delete file="${mac.x86_64.zipfile}"/>
	</target>

	<!-- ================================= 
          target: readProductVersion                      
         ================================= -->
	<target name="readProductVersion" description="Read the version for the product to be packed.">
		<!-- need this to be able to use the if -->
		<taskdef resource="net/sf/antcontrib/antlib.xml"/>
		<if>
			<available file="${productVersionFile}"/>
			<then>
				<property file="${productVersionFile}"/>
				<!-- we replace the "-SNAPSHOT" with ".SNAPSHOT" otherwise while generating the 
					deb file an exception will be raised: Upstream version can contain hyphens only if debian version is specified! -->
				<propertyregex property="jss.version"
				               input="${productBuildQualifier}"
				               regexp="-"
				               replace="."
				               global="true" />
			</then>
			<else>
				<property name="manifestFilePosition" value="../../${jssRcpPluginName}/META-INF/MANIFEST.MF"/>
				<readBundleVersion fileposition="${manifestFilePosition}"/>
				<property name="jss.version" value="${Bundle-Version}"/>
			</else>
		</if>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: readBundleVersion          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="readBundleVersion">
		<attribute name="fileposition"/>
		<sequential>
			<loadproperties srcfile="@{fileposition}">
				<filterchain>
					<linecontains>
						<contains value="Bundle-Version:"/>
					</linecontains>
				</filterchain>
			</loadproperties>
		</sequential>
	</macrodef>

	<!-- ================================= 
          target: createDeb
         ================================= -->
	<target name = "createDeb" description = "Create a deb file with the binary inside">
		<path id="ant-deb.classpath">
			<fileset dir="${jssRcpProductFolderPath}/lib" includes="ant-deb.jar"/>
		</path>
		<taskdef name="deb" classname="com.googlecode.ant_deb_task.Deb" classpathref="ant-deb.classpath"/>
		<taskdef name="desktopEntry" classname="com.googlecode.ant_deb_task.DesktopEntry" classpathref="ant-deb.classpath"/>

		<mkdir dir="${dist}/debian/usr/share/applications" />
		<mkdir dir="${dist}/debian/opt/jaspersoft" />
		<copy todir="${dist}/debian/opt/jaspersoft" >
			<fileset dir="${zipdir.linux}" includes="**"/>
		</copy>
		<echo file="${dist}/debian/postinst" append="false">#! /bin/sh
chmod +x "/opt/jaspersoft/${jss.distro.folder}/Jaspersoft Studio"
chmod +x "/opt/jaspersoft/${jss.distro.folder}/runjss.sh"
chmod -R +x "/opt/jaspersoft/${jss.distro.folder}/${jre.feature.location}/"
exit 0;</echo>
		<desktopEntry 
				toFile="${dist}/debian/usr/share/applications/jasperstudio.desktop" 
				path="/opt/jaspersoft/${jss.distro.folder}" 
				icon="/opt/jaspersoft/${jss.distro.folder}/icon.xpm" 
				name="Jaspersoft Studio Community" 
				exec="&quot;/opt/jaspersoft/${jss.distro.folder}/Jaspersoft Studio&quot;"
				categories="Office"/>
		<deb 
				todir="${dist}" 
				package="${debpackage}"
				section="editors" 
				postinst="${dist}/debian/postinst" 
				architecture="${architecture}"
				homepage="https://community.jaspersoft.com/project/jaspersoft-studio"
				appname="Jaspersoft Studio Community">
			<version upstream="${jss.version}" debian="" />
			<maintainer name="Jaspersoft Studio Team" email="dev-jss@jaspersoft.com"/>
			<description synopsis="An open-source Eclipse-based report designer for JasperReports and JasperReports Server.">
	Jaspersoft Studio is a new, free, open source report designer for JasperReports. 
	Jaspersoft Studio is a port of iReport on top of the Eclipse platform and its core is JasperReports.
			    </description>
			<tarfileset dir="${dist}/debian">
				<include name="usr/**" />
				<include name="opt/**" />
			</tarfileset>
		</deb>

		<delete dir="${dist}/debian" />
		<!-- rename file to compliant policy -->
		<move file="${dist}/${debpackage}_${jss.version}_${architecture}.deb" tofile="${dist}/${jss.distro.prefix}_${jss.version}_linux_${architecture}.deb" />
		<!-- END DEB CREATION -->
	</target>
</project>